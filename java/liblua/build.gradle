/*
 * This file was generated by the Gradle 'init' task.
 *
 * This generated file contains a sample Java Library project to get you started.
 * For more details take a look at the Java Libraries chapter in the Gradle
 * user guide available at https://docs.gradle.org/4.7/userguide/java_library_plugin.html
 */

buildscript {
	repositories.jcenter()
}

plugins {
	// Apply the java-library plugin to add support for Java Library
	id 'java-library'

	id 'eclipse'
}

dependencies {
	// Use JUnit test framework
	testCompile 'junit:junit:4.12'
}

// In this section you declare where to find the dependencies of your project
repositories {
	// Use jcenter for resolving your dependencies.
	// You can declare any Maven/Ivy/file repository here.
	jcenter()
}

def verFileName = 'version.txt'
def verFile = file(new File(processResources.destinationDir, verFileName))
def verTestFile = file(new File(processTestResources.destinationDir, verFileName))
task genVer {
	description 'Generate version resource'
	outputs.files verFile, verTestFile
	doLast {
		def text = 'No version info\n'
		try {
			def proc = 'git describe --always --dirty'.execute()
			proc.waitFor()
			if (proc.exitValue() == 0) {
				text = proc.text.trim() + '\n'
				println('Version info: git-describe = ' + text.trim())
			} else {
				logger.warn('Warning: git describe failed.')
			}
		} catch (e) {
			logger.warn('Warning: git command failed.')
			logger.warn('Ensure that git command is available.')
		}
		verFile.text = text
		verTestFile.text = text
	}
}
processResources.dependsOn(genVer)

javadoc {
	destinationDir file('../../docs')
	options.author()
	options.version()
	options.addBooleanOption('notimestamp', true)
}

test {
	systemProperty 'java.library.path', file('build/natives/')
}

compileTestJava {
	options.encoding 'UTF-8'
}
